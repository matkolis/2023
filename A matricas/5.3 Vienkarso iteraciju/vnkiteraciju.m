
%% 2.jaut. Vienk캐r코캐 iter캐ciju metode
% Pie켽emt optim캐lo parametra tau v캡rt캶bu
clc, clearvars, format compact
A =[8 7 9 15
    7 16 16 2
    9 16 256 10
    15 2 10 48]; B =[3
    4
    6
    8];
if det(A) == 0
 disp('Matrica A ir singul캐r캐 ')
 disp(' Atbilde: vienk캐r코o iter캐ciju metodi nedr캶kst izmantot')
 return
end
disp('Matrica A ir nesingul캐r캐 ')
ni = fun_prob5(A); % p캐rbaude vai matrica ir pozitiv캐 defin캡ta
if ni == 2
 disp('Koeficientu matrica nav pozit캶vi defin캡ta')
 disp(' Atbilde: vienk캐r코o iter캐ciju metodi nedr캶kst izmantot')
 return
end
check=isequal(A,A');
if check==0
 disp('Koeficientu matrica nav simetrisk캐')
 disp(' Atbilde: vienk캐r코o iter캐ciju metodi nedr캶kst izmantot')
 return
end
disp('Koeficientu matrica ir simetrisk캐 un pozit캶vi defin캡ta ')
% Ctrl+Enter

% turpin캐jums
lennB = length(B);
x_app = zeros(lennB,1); epsi = 10^(-3); itermax = 19;
x_app=[1
    0
    -1
    3];
lambda = eig(A); tau_opt = 2/(max(lambda)+min(lambda)); % 洧랦洧녶 =2/(洧랝洧녴洧녩洧논 + 洧랝洧녴洧녰n)
k_iter = 0; resid = B-A*x_app;
while norm(resid) > epsi && k_iter < itermax
 x_app = x_app+tau_opt*resid;
 resid = B-A*x_app;
 k_iter = k_iter +1;
end
%tau_opt, k_iter, x_app % Ctrl+Enter
x_sol=linsolve(A,B) ;
%19. t캐tad saglab캐ts jau
%haha nek캐 at코컁iras gan
X_app19_norm1 =norm(x_sol-x_app)
X_app19_norm2 =norm(x_sol)-norm(x_app)
%{
%tuvin캐t캐 atrisin캐juma norma ||x(12)||
X_app5_norm =norm(x_app)
%}
disp('t캐tad otrais j캐켽em.')
%{
% turpin캐jums
disp('Atbilde:')
disp([' iter. skaits = ' num2str(k_iter) ])
disp([' x_tuvinajumi = {' num2str(x_app(:)') '}'])
disp([' optim캐la parametra tau v캡rt. = ' num2str(tau_opt)])
%}



%-----------------------------------------------------------------------------------------
%-----------------------------------------------------------------------------------------
%-----------------------------------------------------------------------------------------

%% 캐r캡ja funkcija( 5.piem캡rs ) Vienk캐r코캐 iter캐ciju metode
% p캐rbaude: vai matrica ir pozit캶vi defin캡ta
function ni = fun_prob5(A_mat)
 ni = 1;
 [row,col] = size(A_mat);
 for i = 1:row
 if det(A_mat(1:i,1:i))>0
 else ni = 2; break
 end
 end
end

% 칙r칞ja funkcija ( 3.piem칞rs ). Jakobi metode
% p칙rbaude: vai Jakobi metode konver칣칞?
function fun_prob3(A_mat)
 [row,col] = size(A_mat);
 for i = 1:row
    sum =0;
    for j = 1:col
        if i~=j
            sum =sum+abs(A_mat(i,j));
        end
    end
    if abs(A_mat(i,i)) <= sum
      disp(' Neizpild칙s konver칣ences pietiekamais nosac칥jums')
      fprintf(' rindas numurs %.0f: --> %.0f < %.0f \n', i,A_mat(i,i),sum ) 
      return
    end
 end
 disp(' Izpild칙s konver.pietiekamais nosac칥jums - Jakobi metode konver칣칞')
end




